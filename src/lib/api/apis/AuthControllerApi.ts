/* tslint:disable */
/* eslint-disable */
/**
 * Charitan Authentication API
 * API documentation for Charitan\'s authentication service.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { AuthDto, Claim } from "../models/index";
import {
  AuthDtoFromJSON,
  AuthDtoToJSON,
  ClaimFromJSON,
  ClaimToJSON,
} from "../models/index";

export interface SigninRequest {
  authDto: AuthDto;
}

export interface SignupRequest {
  authDto: AuthDto;
}

export interface TestRequest {
  claim: Claim;
}

/**
 *
 */
export class AuthControllerApi extends runtime.BaseAPI {
  /**
   * Authenticates a user and returns a token as an HttpOnly cookie.
   * Sign in a user
   */
  async signinRaw(
    requestParameters: SigninRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<boolean>> {
    if (requestParameters["authDto"] == null) {
      throw new runtime.RequiredError(
        "authDto",
        'Required parameter "authDto" was null or undefined when calling signin().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/auth/signin`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: AuthDtoToJSON(requestParameters["authDto"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<boolean>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Authenticates a user and returns a token as an HttpOnly cookie.
   * Sign in a user
   */
  async signin(
    requestParameters: SigninRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<boolean> {
    const response = await this.signinRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Registers a new user in the system.
   * Sign up a new user
   */
  async signupRaw(
    requestParameters: SignupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["authDto"] == null) {
      throw new runtime.RequiredError(
        "authDto",
        'Required parameter "authDto" was null or undefined when calling signup().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/auth/signup`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: AuthDtoToJSON(requestParameters["authDto"]),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Registers a new user in the system.
   * Sign up a new user
   */
  async signup(
    requestParameters: SignupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.signupRaw(requestParameters, initOverrides);
  }

  /**
   * Decodes and validates a JWT claim. For testing only.
   * Validate a JWT claim
   */
  async testRaw(
    requestParameters: TestRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["claim"] == null) {
      throw new runtime.RequiredError(
        "claim",
        'Required parameter "claim" was null or undefined when calling test().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/auth/validate`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ClaimToJSON(requestParameters["claim"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Decodes and validates a JWT claim. For testing only.
   * Validate a JWT claim
   */
  async test(
    requestParameters: TestRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.testRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
